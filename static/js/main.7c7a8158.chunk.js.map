{"version":3,"sources":["logo.png","Todo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ToDo","props","fnchangeinput","e","setState","text","target","value","clikadd","arr","state","list","push","complete","console","log","fncomplete","el","x","map","element","fndelete","item","filter","className","type","placeholder","onChange","this","onClick","i","key","src","logo","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,oNCqE5BC,E,YAjEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,cAAgB,SAACC,GACb,EAAKC,SAAS,CACVC,KAAMF,EAAEG,OAAOC,SAVJ,EAanBC,QAAU,WACN,IAAIC,EAAM,EAAKC,MAAMC,KACrBF,EAAIG,KAAK,CACLP,KAAO,EAAKK,MAAML,KAClBQ,UAAW,IAEfC,QAAQC,IAAIN,GACZ,EAAKL,SAAS,CACVO,KAAMF,EACNJ,KAAM,MAtBK,EAyBnBW,WAAa,SAACC,GACV,IAAIC,EAAI,EAAKR,MAAMC,KAAKQ,KAAI,SAAAC,GAAO,OAAIH,EAAGZ,OAASe,EAAQf,KACvD,CAACA,KAAOY,EAAGZ,KACXQ,UAAYO,EAAQP,UAClBO,KACNN,QAAQC,IAAIG,GACZ,EAAKd,SAAS,CAACO,KAAOO,IACtBJ,QAAQC,IAAI,EAAKL,MAAMC,OAhCR,EAkCnBU,SAAW,SAACC,GACR,EAAKlB,SAAS,CAACO,KAAM,EAAKD,MAAMC,KAAKY,QAAO,SAAAN,GAAE,OAAIA,IAAOK,QAjCzD,EAAKZ,MAAQ,CACTL,KAAM,GACNM,KAAM,GACNE,UAAU,GALC,E,sEAqCT,IAAD,OACL,OACI,6BACI,yBAAKW,UAAU,QACX,2CACA,6CACA,2BAAOA,UAAU,YAAYC,KAAK,OAAOC,YAAY,iBAAiBC,SAAUC,KAAK1B,cAAeK,MAAOqB,KAAKlB,MAAML,OACtH,yBAAKmB,UAAU,cACX,4BAAQA,UAAU,UAAUK,QAASD,KAAKpB,SAA1C,SAGR,wBAAIgB,UAAU,YAAd,8BACA,6BACA,8BACKI,KAAKlB,MAAMC,KAAKQ,KAAI,SAACF,EAAIa,GAAL,OAAW,yBAAKC,IAAKD,EAAGN,UAAU,QACnD,4BAAQA,UAAU,aAAaK,QAAS,kBAAM,EAAKb,WAAWC,KAAMA,EAAGJ,SAAW,OAAS,YAC3F,4BAAQW,UAAU,aAAaK,QAAS,kBAAM,EAAKR,SAASJ,KAA5D,UACA,wBAAIO,WAA2B,IAAhBP,EAAGJ,SAAoB,OAAS,IAAKI,EAAGZ,WAG/D,6BACI,yBAAK2B,IAAKC,Y,GA3DXC,IAAMC,WCaVC,MAXf,WACE,OACE,yBAAKZ,UAAU,OACb,8BACE,kBAAC,EAAD,SCGYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7c7a8158.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.68a5ccd7.png\";","import React, { Component } from 'react';\r\nimport logo from './logo.png';\r\n\r\nclass ToDo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            text: \"\",\r\n            list: [],\r\n            complete: false\r\n        }\r\n    }\r\n    fnchangeinput = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n    clikadd = () => {\r\n        let arr = this.state.list;\r\n        arr.push({\r\n            text : this.state.text,\r\n            complete : false\r\n        })\r\n        console.log(arr)\r\n        this.setState({\r\n            list: arr,\r\n            text: \"\"\r\n        })\r\n    }\r\n    fncomplete = (el) => {\r\n        let x = this.state.list.map(element => el.text === element.text ? \r\n            {text : el.text,\r\n            complete : !element.complete} \r\n            : element )\r\n        console.log(x)\r\n        this.setState({list : x})\r\n        console.log(this.state.list)\r\n    }\r\n    fndelete = (item) => {\r\n        this.setState({list: this.state.list.filter(el => el !== item)})\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bleu\">\r\n                    <h1>To-Do App !</h1>\r\n                    <h5>Add New To-Do</h5>\r\n                    <input className=\"zone-text\" type=\"text\" placeholder=\"Enter new task\" onChange={this.fnchangeinput} value={this.state.text} />\r\n                    <div className=\"button-add\">\r\n                        <button className=\"add-btn\" onClick={this.clikadd} >Add</button>\r\n                    </div>\r\n                </div>\r\n                <h2 className=\"titre-h2\">Let's get some work done !</h2>\r\n                <hr />\r\n                <main>\r\n                    {this.state.list.map((el, i) => <div key={i} className=\"todo\">\r\n                        <button className=\"btn-delete\" onClick={() => this.fncomplete(el)}>{el.complete ? 'Undo' : 'Complete'}</button>\r\n                        <button className=\"btn-delete\" onClick={() => this.fndelete(el)}>Delete</button>\r\n                        <h1 className={el.complete === true ? \"done\" : \"\"}>{el.text}</h1>\r\n                    </div>)}\r\n                </main>\r\n                <div>\r\n                    <img src={logo} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToDo","import React from 'react';\n\nimport './App.css';\nimport ToDo from './Todo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <body>\n        <ToDo />\n      </body>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}